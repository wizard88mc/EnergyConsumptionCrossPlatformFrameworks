/*
Copyright (C) 2011 MoSync AB

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA.
*/
/**
* Usage example for the location API.
* A Moblet that retrieves Location events and prints raw data to the console.
*
* WARNING: The location API is experimental, not fully tested. It may not work as advertised.
* Implementation details are likely to change in the future.
*/


#include <conprint.h>
#include <maassert.h>
#include <MAUtil/Moblet.h>

using namespace MAUtil;

class LocationMoblet : public Moblet {
private:
	int mLastTime;
	bool active;
public:

	/**
	* Constructor
	*
	* Prints an initial message and attempts to begin
	* collecting location information.
	*/
	LocationMoblet() {

		start();
	}

	/**
	* Begins collecting location information.
	*/
	void start() {
		int res = maLocationStart();
		active = res >= 0;
		mLastTime = maGetMilliSecondCount();
		maSetColor(0x000000);
		maFillRect(0, 0, 1000, 1000);

		char bufferLatitude[50], bufferLongitude[50];
		sprintf(bufferLatitude, "Latitude: 0.0");
		sprintf(bufferLongitude, "Longitude: 0.0");

		maSetColor(0xFFFFFF);
		maFontLoadDefault(FONT_TYPE_SANS_SERIF, FONT_STYLE_NORMAL, 15);
		maDrawText(10, 10, "Geolocation Test");
		maDrawText(10, 50, bufferLatitude);
		maDrawText(10, 90, bufferLongitude);
		maUpdateScreen();
	}

	/**
	* Processes the user's key presses.
	*
	* @param keyCode     The key code of the key that was pressed
	*/
	void keyPressEvent(int keyCode, int nativeCode) {
		if(keyCode == MAK_0 || keyCode == MAK_SOFTRIGHT || keyCode == MAK_BACK)
			maExit(0);
		if(keyCode == MAK_FIRE || keyCode == MAK_SOFTLEFT) {
			if(active) {
				int res = maLocationStop();
				printf("Stop: %i\n", res);
				active = false;
			} else {
				start();
			}
		}
	}

	void pointerPressEvent(MAPoint2d /*point*/) {
		if(active) {
			int res = maLocationStop();
			printf("Stop: %i\n", res);
			active = false;
		} else {
			start();
		}
	}

	/**
	* Handles the custom location events generated by the location API.
	*/
	void customEvent(const MAEvent& event) {
		if(event.type == EVENT_TYPE_LOCATION) {
			MALocation& loc = *(MALocation*)event.data;

			if(loc.lon < -180.0 || loc.lon > 180.0 || loc.lat < -90.0 || loc.lat > 90.0) {
				printf("invalid lat or lon\n");
			} else {
				maSetColor(0xB6B6B6);
				maFillRect(0, 0, 1000, 1000);

				char bufferLatitude[50], bufferLongitude[50];
				sprintf(bufferLatitude, "Latitude: %.5g", loc.lat);
				sprintf(bufferLongitude, "Longitude: %.5g", loc.lon);

				maSetColor(0x000000);
				maDrawText(10, 10, "Geolocation Test");
				maDrawText(10, 50, bufferLatitude);
				maDrawText(10, 90, bufferLongitude);
				maUpdateScreen();
			}

		} else if(event.type == EVENT_TYPE_LOCATION_PROVIDER) {
			const char *strings[]= {
				"AVAILABLE",
				"TEMPORARILY_UNAVAILABLE",
				"OUT_OF_SERVICE"
			};



		} else {

		}
	}
};

extern "C" int MAMain() {
	InitConsole();
	gConsoleLogging = 1;
	Moblet::run(new LocationMoblet());
	return 0;
}
